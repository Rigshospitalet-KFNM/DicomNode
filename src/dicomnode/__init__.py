"""Dicomnode is a library for transformation between dicom and other medical
image formats, creating a dicom SCP with the intension of being post processing
of dicom images, including AI models and kinetics modeling.
"""

from importlib import import_module
from os import environ
from pathlib import Path

from dicomnode.lib import utils as __utils #

from . import constants

__version__ = constants.DICOMNODE_VERSION # This is gonna be annoying
__author__ = "Christoffer Vilstrup Jensen"

def version() -> str:
  """Gets the version of the package

  Returns:
      str: a string containing the version number separated by dots
  """
  return __version__


class _LibraryPaths:
  """Class for holding various path used by the library.

  These are intended to be static for the lifetime of the program.

"""
  # These are uninitialzed values
  _processing_directory = Path('.')
  _report_directory = Path('.')
  _report_data_directory = Path('.')
  _figure_directory = Path('.')

  @property
  def processing_directory(self) -> Path:
    return self._processing_directory

  @property
  def report_directory(self) -> Path:
    return self._report_directory

  @property
  def report_data_directory(self) -> Path:
    return self._report_data_directory

  @property
  def figure_directory(self):
    return self._figure_directory

  def __init__(self) -> None:
    self.update_paths()

  def update_paths(self):
    """_summary_
    """
    self.set_directory_path('_processing_directory', constants.DICOMNODE_ENV_PROCESSING_PATH, constants.DEFAULT_PROCESSING_DIRECTORY)
    self.set_directory_path('_report_directory', constants.DICOMNODE_ENV_REPORT_PATH, constants.DEFAULT_REPORTS_DIRECTORY)
    self.set_directory_path('_report_data_directory', constants.DICOMNODE_ENV_REPORT_DATA_PATH, constants.DEFAULT_REPORT_DATA_DIRECTORY)
    self.set_directory_path('_figure_directory', constants.DICOMNODE_ENV_FIGURE_PATH, constants.DEFAULT_FIGURE_DIRECTORY)

  def set_directory_path(self, key: str, environment_key, default):
    try:
      if environment_key in environ:
        path = Path(environ[environment_key])
        setattr(self, key, path)
      else:
        path = Path(default)
        setattr(self, key, path)

      if not path.exists(): # pragma: no cover
        path.mkdir(parents=True, exist_ok=True) # Mainly here in cases of multithreading
    except PermissionError:
      setattr(self, key, None)

library_paths = _LibraryPaths()
"""Data class holding various paths used by the library
These include:
* figure directory - Folder that figures generated by dicomnode.report.plot
are saved to. Can be set by environment variable:
* report_directory - Folder that reports generated by dicomnode.report are saved to
* report_data_directory - Folder that you are intended to save static files to such as logos
* processing_directory - Folder that
"""

__data_structures = None
__dicom = None
__lib = None
__tools = None
__math = None
__server = None
__report = None

# See https://peps.python.org/pep-0562/ to understand the Voodoo magic going on here
def __getattr__(name):  #pragma: no cover
  if name == 'lib':
    global __lib
    if __lib is None:
      __lib = import_module('dicomnode.lib')
    return __lib

  if name == 'tools':
    global __tools
    if __tools is None: #pragma: no cover
      __tools = import_module('dicomnode.tools')
    return __tools

  if name == 'server':
    global __server
    if __server is None: #pragma: no cover
      __server = import_module('dicomnode.server')
    return __server

  if name == 'report':
    global __report
    if __report is None: #pragma: no cover
      __report = import_module('dicomnode.report')
    return __report

  if name == 'dicom':
    global __dicom
    if __dicom is None: #pragma: no cover
      __dicom = import_module('dicomnode.dicom')
    return __dicom

  if name == 'data_structures': #pragma: no cover
    global __data_structures
    if __data_structures is None:
      __data_structures = import_module('dicomnode.data_structures')
    return __data_structures

  if name == 'math': #pragma: no cover
    global __math
    if __math is None:
      __math = import_module('dicomnode.math')
    return __math

  raise AttributeError(f"module {__name__} has no attribute '{name}'")


__all__ = [
  'constants', 'data_structures', 'dicom', 'lib', 'library_paths', 'math', 'report', 'server', 'tools', 'version',
]

def __dir__():
  return __all__
